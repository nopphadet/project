package productProvider

import (
	"database/sql"
	"log"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	_ "github.com/go-sql-driver/mysql"
)

func getDBConnection() (*sql.DB, error) {
	db, err := sql.Open("mysql", "root:@tcp(localhost:3306)/myapp?timeout=30s&charset=utf8mb4")
	if err != nil {
		return nil, err
	}

	db.SetMaxOpenConns(10)
	db.SetMaxIdleConns(5)
	db.SetConnMaxLifetime(30 * time.Minute)

	if err := db.Ping(); err != nil {
		return nil, err
	}
	return db, nil
}

func SearchProducts(c *gin.Context) {
	db, err := getDBConnection()
	if err != nil {
		log.Printf("Database connection failed: %v", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "ไม่สามารถเชื่อมต่อฐานข้อมูลได้"})
		return
	}
	defer db.Close()

	productName := c.DefaultQuery("name", "")
	category := c.DefaultQuery("category", "")

	query := "SELECT product_number, product_name, category, image_path, quantity, barcode FROM products WHERE 1=1"
	var args []interface{}

	if productName != "" {
		query += " AND product_name COLLATE utf8mb4_general_ci LIKE ?"
		args = append(args, "%"+productName+"%")
	}

	if category != "" && category != "ทั้งหมด" {
		query += " AND category = ?"
		args = append(args, category)
	}

	log.Printf("Executing query: %s, args: %v", query, args)
	rows, err := db.Query(query, args...)
	if err != nil {
		log.Printf("Error fetching products: %v", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "ไม่สามารถค้นหาสินค้าได้"})
		return
	}
	defer rows.Close()

	var products []map[string]interface{}
	for rows.Next() {
		var productNumber, productName, category, barcode string
		var quantity int
		if err := rows.Scan(&productNumber, &productName, &category, &quantity, &barcode); err != nil {
			log.Printf("Error scanning product: %v", err)
			c.JSON(http.StatusInternalServerError, gin.H{"error": "ไม่สามารถดึงข้อมูลสินค้าได้"})
			return
		}

		products = append(products, map[string]interface{}{
			"product_number": productNumber,
			"product_name":   productName,
			"category":       category,
			"quantity":       quantity,
			"barcode":        barcode,
		})
	}

	if len(products) == 0 {
		c.JSON(http.StatusOK, gin.H{"message": "ไม่พบข้อมูลสินค้า", "products": []map[string]interface{}{}})
		return
	}

	c.JSON(http.StatusOK, gin.H{"products": products})
}
