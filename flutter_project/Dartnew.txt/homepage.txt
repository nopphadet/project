import 'dart:async';
import 'package:barcode_scan2/barcode_scan2.dart';
import 'package:intl/intl.dart';
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter_project/ForgotPassword/ForgotPassword.dart';
import 'package:flutter_project/ProductProvider/ProductProvider.dart';
import 'package:http/http.dart' as http;
import 'package:flutter_project/AddProductPage/AddProduct.dart';
import 'package:flutter_project/HistoryPage/historyPage.dart';
import 'package:flutter_project/Product/product.dart';
import 'package:flutter_project/login/login.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter_project/Product/product.dart'
    show Product, ProductDetailPage, ProductListPage;

class LoginPage extends StatefulWidget {
  final String role;

  const LoginPage({super.key, required this.role});

  @override
  // ignore: library_private_types_in_public_api
  _LoginPageState createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  late Future<List<Product>> productsFuture;
  String? role;
  // ignore: unused_field
  bool _isLoading = false; // เปลี่ยนจาก unused_field เป็นใช้งานได้
  String? username;
  int? quantity;

  @override
  void initState() {
    super.initState();
    print("initState");
    productsFuture = fetchProductsFromApi();
    fetchUserName();
  }

  @override
  void didUpdateWidget(LoginPage oldWidget) {
    print("didUpdateWidget");
    super.didUpdateWidget(oldWidget);
    setState(() {
      productsFuture = fetchProductsFromApi();
    });
  }

  @override
  void didChangeDependencies() {
    print("didChangeDependencies");
    super.didChangeDependencies();
    productsFuture = fetchProductsFromApi(); // รีเฟรชเมื่อหน้าแสดงใหม่
  }

  Future<void> fetchUserName() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String? usernameNew = prefs.getString('username');
    setState(() {
      username = usernameNew;
    });
  }

  Future<List<Product>> fetchProductsFromApi() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String? roleNew = prefs.getString('role');

    const String apiUrl =
        "https://hfm99nd8-7070.asse.devtunnels.ms/showproducts";

    try {
      final response = await http.get(Uri.parse(apiUrl));

      if (response.statusCode == 200) {
        final List<dynamic> data = json.decode(response.body);
        print("=====================================");
        print(data);
        print("=====================================");
        List<Product> products =
            data.map((item) => Product.fromJson(item)).toList();
        quantity = products.isNotEmpty
            ? products.map((e) => e.stock).reduce((a, b) => a + b)
            : 0; // ป้องกันข้อผิดพลาดเมื่อ data ว่าง
        setState(() {
          role = roleNew;
          quantity = quantity;
        });
        return products; // ส่งกลับ List<Product> แทน data.map
      } else {
        throw Exception("ไม่สามารถดึงข้อมูลวัสดุได้: ${response.statusCode}");
      }
    } catch (e) {
      throw Exception("เกิดข้อผิดพลาด: $e");
    }
  }

  Future<void> scanBarcode() async {
    try {
      var result = await BarcodeScanner.scan();
      if (result.rawContent.isNotEmpty) {
        showDialog(
          context: context,
          barrierDismissible: false,
          builder: (context) {
            return const Center(child: CircularProgressIndicator());
          },
        );

        final response = await http.post(
          Uri.parse("https://hfm99nd8-7070.asse.devtunnels.ms/api/scan"),
          headers: {"Content-Type": "application/json"},
          body: jsonEncode({"barcode": result.rawContent}),
        );

        Navigator.of(context).pop();

        if (response.statusCode == 200) {
          final data = json.decode(response.body);

          if (data["status"] == "not_found") {
            showDialog(
              context: context,
              builder: (context) {
                return AlertDialog(
                  title: Text('วัสดุไม่พบในระบบ'),
                  content: Text('คุณต้องการสร้างวัสดุใหม่หรือไม่?'),
                  actions: [
                    TextButton(
                      onPressed: () {
                        Navigator.of(context).pop();
                      },
                      child: Text('ยกเลิก'),
                    ),
                    TextButton(
                      onPressed: () {
                        Navigator.of(context).pop();
                        Navigator.push(
                          context,
                          PageRouteBuilder(
                            pageBuilder:
                                (context, animation, secondaryAnimation) =>
                                    AddProductPage(),
                            transitionsBuilder: (context, animation,
                                secondaryAnimation, child) {
                              return FadeTransition(
                                opacity: animation,
                                child: child,
                              );
                            },
                          ),
                        );
                      },
                      child: Text('สร้างใหม่'),
                    ),
                  ],
                );
              },
            );
          } else {
            String message = data["message"];
            String? newQuantity = data["new_quantity"]?.toString();

            showDialog(
              context: context,
              builder: (context) {
                return AlertDialog(
                  title: const Text('ผลการสแกนสำเร็จ'),
                  content: Text('$message\nจำนวนคงเหลือใหม่: $newQuantity'),
                  actions: [
                    TextButton(
                      onPressed: () {
                        Navigator.of(context).pop();
                        scanBarcode();
                      },
                      child: const Text('ตกลง'),
                    ),
                  ],
                );
              },
            );
          }
        } else {
          showDialog(
            context: context,
            builder: (context) {
              return AlertDialog(
                title: const Text('ข้อผิดพลาด'),
                content: Text('การสแกนล้มเหลว: ${response.body}'),
                actions: [
                  TextButton(
                    onPressed: () {
                      Navigator.of(context).pop();
                      scanBarcode();
                    },
                    child: const Text('ตกลง'),
                  ),
                ],
              );
            },
          );
        }
      }
    } catch (e) {
      print('เกิดข้อผิดพลาดในการสแกน: $e');
      showDialog(
        context: context,
        builder: (context) {
          return AlertDialog(
            title: const Text('ข้อผิดพลาด'),
            content: Text('เกิดข้อผิดพลาดในการสแกน: $e'),
            actions: [
              TextButton(
                onPressed: () {
                  Navigator.of(context).pop();
                  scanBarcode();
                },
                child: const Text('ตกลง'),
              ),
            ],
          );
        },
      );
    }
  }

  Future<void> _refresh() async {
    setState(() {
      productsFuture = fetchProductsFromApi();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
          title: Row(
            children: [
              Image.asset('assets/PNG/LOGO.png', height: 40, width: 40),
              Text('Stock MIS',
                  style: const TextStyle(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  )),
            ],
          ),
          backgroundColor: const Color.fromARGB(255, 255, 0, 0),
          actions: [
            PopupMenuButton<String>(
              onSelected: (value) {
                if (value == 'logout') {
                  SharedPreferences.getInstance().then((prefs) {
                    prefs.remove('token');
                    prefs.remove('role');
                  });
                  Navigator.push(context,
                      MaterialPageRoute(builder: (context) => Login()));
                } else if (value == 'contact_admin') {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('ติดต่อ Admin')),
                  );
                  Navigator.push(context,
                      MaterialPageRoute(builder: (context) => ContactAdmin()));
                }
              },
              icon: Icon(Icons.more_vert, color: Colors.white),
              itemBuilder: (BuildContext context) => [
                PopupMenuItem<String>(
                  value: 'logout',
                  child: Row(
                    children: [
                      Icon(Icons.logout, color: Colors.red),
                      SizedBox(width: 10),
                      Text('ออกจากระบบ'),
                    ],
                  ),
                ),
                PopupMenuItem<String>(
                  value: 'contact_admin',
                  child: Row(
                    children: [
                      Icon(Icons.support_agent,
                          color: Color.fromARGB(255, 247, 32, 32)),
                      SizedBox(width: 10),
                      Text('ติดต่อ Admin'),
                    ],
                  ),
                ),
              ],
            )
          ]),
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              Color.fromARGB(255, 255, 255, 255),
              Color.fromARGB(255, 245, 245, 241),
            ],
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
          ),
        ),
        child: RefreshIndicator(
          onRefresh: _refresh,
          child: SingleChildScrollView(
            physics:
                AlwaysScrollableScrollPhysics(), // อนุญาตให้เลื่อนแม้ข้อมูลสั้น
            child: Padding(
              padding: const EdgeInsets.all(30),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: <Widget>[
                  const SizedBox(height: 20),
                  Container(
                    width: 100,
                    height: 150,
                    decoration: BoxDecoration(
                      gradient: const LinearGradient(
                        colors: [
                          Color.fromARGB(255, 255, 255, 255),
                          Color.fromARGB(255, 245, 245, 241),
                        ],
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                      ),
                      borderRadius: BorderRadius.circular(30.0),
                      boxShadow: [
                        BoxShadow(
                          color: Color.fromARGB(50, 255, 64, 64),
                          blurRadius: 15,
                          spreadRadius: 2,
                          offset: Offset(0, 8),
                        ),
                        BoxShadow(
                          color: Color.fromARGB(40, 255, 0, 0),
                          blurRadius: 20,
                          spreadRadius: 1,
                          offset: Offset(0, 6),
                        ),
                        BoxShadow(
                          color: Color.fromARGB(30, 220, 0, 0),
                          blurRadius: 25,
                          spreadRadius: 0,
                          offset: Offset(0, 4),
                        ),
                      ],
                    ),
                    child: Padding(
                      padding: const EdgeInsets.symmetric(
                          horizontal: 20.0, vertical: 20.0),
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Row(
                            children: [
                              Icon(Icons.account_circle,
                                  color: Color.fromARGB(255, 0, 0, 0),
                                  size: 47),
                              SizedBox(width: 8),
                              Text(
                                '$username',
                                style: const TextStyle(
                                  fontSize: 20,
                                  color: Color.fromARGB(255, 34, 31, 31),
                                  fontWeight: FontWeight.bold,
                                  letterSpacing: 1.2,
                                ),
                              ),
                            ],
                          ),
                          const SizedBox(height: 10),
                          Text(
                            'วันที่: ${DateFormat('dd/MM/yyyy').format(DateTime.now())}',
                            style: const TextStyle(
                              fontSize: 14,
                              color: Color.fromARGB(255, 34, 31, 31),
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                          const SizedBox(height: 10),
                          Text(
                            'วัสดุคงเหลือ: $quantity ชิ้น',
                            style: const TextStyle(
                              fontSize: 14,
                              color: Color.fromARGB(255, 34, 31, 31),
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                  const SizedBox(height: 20),
                  _buildCategorySection(),
                  const SizedBox(height: 10),
                  Text('วัสดุล่าสุด',
                      style: TextStyle(
                          fontSize: 24,
                          fontWeight: FontWeight.bold,
                          color: Colors.black)),
                  const SizedBox(height: 10),
                  FutureBuilder<List<Product>>(
                    future: productsFuture,
                    builder: (context, snapshot) {
                      if (snapshot.connectionState == ConnectionState.waiting) {
                        return const Center(child: CircularProgressIndicator());
                      } else if (snapshot.hasError) {
                        return Center(
                            child: Text('เกิดข้อผิดพลาด: ${snapshot.error}',
                                style: TextStyle(color: Colors.red)));
                      } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
                        return const Center(child: Text('ไม่มีวัสดุล่าสุด'));
                      } else {
                        final products = snapshot.data!;
                        return _buildProductGrid(products);
                      }
                    },
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: scanBarcode,
        child: const Icon(Icons.center_focus_weak, color: Colors.white),
        backgroundColor: Color.fromARGB(255, 255, 0, 0),
      ),
    );
  }

  Widget _buildCategorySection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'หมวดหมู่',
          style: TextStyle(
              fontSize: 24, fontWeight: FontWeight.bold, color: Colors.black),
        ),
        const SizedBox(height: 10),
        Container(
          padding: const EdgeInsets.all(10),
          decoration: BoxDecoration(
            color: Color.fromARGB(255, 255, 255, 255),
            borderRadius: BorderRadius.circular(16),
            boxShadow: const [
              BoxShadow(
                  color: Color.fromARGB(82, 255, 0, 0),
                  blurRadius: 8,
                  offset: Offset(0, 4)),
            ],
          ),
          child: Column(
            children: [
              const SizedBox(height: 10),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceAround,
                children: [
                  if (role == '2' || role == '1')
                    _buildCategoryButton(
                      context,
                      'assets/PNG/box.png',
                      'วัสดุสำนักงาน',
                      ProductListPage(),
                    ),
                  if (role == '1')
                    _buildCategoryButton(
                      context,
                      'assets/PNG/new-product.png',
                      'เพิ่มวัสดุใหม่',
                      AddProductPage(),
                    ),
                  if (role == '2' || role == '1')
                    _buildCategoryButton(
                      context,
                      'assets/PNG/out-of-stock.png',
                      'จองวัสดุ',
                      ProductProvider(),
                    ),
                  if (role == '2' || role == '1')
                    _buildCategoryButton(
                      context,
                      'assets/PNG/file.png',
                      'รายการจอง-คืน',
                      HistoryPage(),
                    ),
                ],
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildProductGrid(List<Product> products) {
    final uniqueProducts = products.take(4).toList();
    return Container(
      child: GridView.builder(
        shrinkWrap: true,
        physics: const NeverScrollableScrollPhysics(),
        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: 2,
          crossAxisSpacing: 10,
          mainAxisSpacing: 20,
        ),
        itemCount: uniqueProducts.length,
        itemBuilder: (context, index) {
          final product = uniqueProducts[index];
          return _buildSquareImageWithDescription(
            context,
            product.imageUrl,
            product.name,
            product,
          );
        },
      ),
    );
  }
}

Widget _buildSquareBoxWithText(
    BuildContext context, String text, String description, Widget nextPage,
    {double width = 100, double height = 150}) {
  return GestureDetector(
    onTap: () {
      Navigator.push(
        context,
        MaterialPageRoute(builder: (context) => nextPage),
      );
    },
    child: Container(
      width: width,
      height: height,
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          colors: [
            Color.fromARGB(255, 245, 245, 241),
            Color.fromARGB(255, 245, 245, 241),
          ],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(30.0),
        boxShadow: const [
          BoxShadow(
            color: Colors.black26,
            blurRadius: 12,
            offset: Offset(0, 4),
          ),
        ],
      ),
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 20.0, vertical: 20.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              text,
              style: const TextStyle(
                fontSize: 20,
                color: Color.fromARGB(255, 34, 31, 31),
                fontWeight: FontWeight.bold,
                letterSpacing: 1.2,
              ),
            ),
            const SizedBox(height: 10),
            Text(
              description,
              style: const TextStyle(
                fontSize: 14,
                color: Color.fromARGB(255, 34, 31, 31),
                fontWeight: FontWeight.w500,
              ),
            ),
          ],
        ),
      ),
    ),
  );
}

Widget _buildCategoryButton(
    BuildContext context, String imagePath, String label, Widget nextPage) {
  return GestureDetector(
    onTap: () {
      Navigator.push(
        context,
        PageRouteBuilder(
          pageBuilder: (context, animation, secondaryAnimation) => nextPage,
          transitionsBuilder: (context, animation, secondaryAnimation, child) {
            return FadeTransition(
              opacity: animation,
              child: child,
            );
          },
        ),
      );
    },
    child: Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Container(
          width: 55,
          height: 60,
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(16),
            boxShadow: const [
              BoxShadow(
                color: Color.fromARGB(17, 0, 0, 0),
                blurRadius: 8,
                offset: Offset(0, 4),
              ),
            ],
          ),
          child: ClipRRect(
            borderRadius: BorderRadius.circular(16),
            child: Image.asset(imagePath, fit: BoxFit.cover),
          ),
        ),
        const SizedBox(height: 8),
        Text(
          label,
          style: const TextStyle(
            fontSize: 14,
            fontWeight: FontWeight.w500,
            color: Colors.black,
          ),
          textAlign: TextAlign.center,
        ),
      ],
    ),
  );
}

Widget _buildSquareImageWithDescription(
    BuildContext context, String imagePath, String description, Product product,
    {double width = 150, double height = 130, bool withBorder = false}) {
  return GestureDetector(
    onTap: () {
      Navigator.push(
        context,
        PageRouteBuilder(
          pageBuilder: (context, animation, secondaryAnimation) =>
              ProductDetailPage(product: product),
          transitionsBuilder: (context, animation, secondaryAnimation, child) {
            return FadeTransition(
              opacity: animation,
              child: child,
            );
          },
        ),
      );
    },
    child: Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Container(
          decoration: withBorder
              ? BoxDecoration(
                  border: Border.all(
                    color: Colors.redAccent,
                    width: 2,
                  ),
                  borderRadius: BorderRadius.circular(20.0),
                )
              : null,
          child: ClipRRect(
            borderRadius: BorderRadius.circular(20.0),
            child: SizedBox(
              width: width,
              height: height,
              child: Image.network(
                imagePath,
                fit: BoxFit.cover,
                errorBuilder: (context, error, stackTrace) =>
                    const Icon(Icons.error),
              ),
            ),
          ),
        ),
        const SizedBox(height: 8),
        Text(description,
            style: const TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.w500,
              color: Colors.black,
            )),
      ],
    ),
  );
}
